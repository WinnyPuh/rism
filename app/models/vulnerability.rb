class Vulnerability < ApplicationRecord
  include Vulnerability::Ransackers
  include CustomFieldable

  ACTUALITIES = {
    not_set: 'not_set',
    actual: 'actual',
    not_actual: 'not_actual'
  }.freeze

  RELEVANCES = {
    not_set: 'not_set',
    relevant: 'relevant',
    not_relevant: 'not_relevant'
  }.freeze

  # source (feed) of vulnerability info
  enum feed: {custom: 'custom', nvd: 'nvd'}
  enum state: %i[readed modified published]
  enum custom_actuality: ACTUALITIES, _prefix: true
  enum custom_relevance: RELEVANCES, _prefix: true
  enum actuality: ACTUALITIES, _prefix: true
  enum relevance: RELEVANCES, _prefix: true

  scope :actual_and_relevant, -> {
    where(
      custom_actuality: 'actual',
      custom_relevance: 'relevant'
    )
  }

  attr_accessor :vendors_str, :products_str

  before_save :set_actuality
  before_save :set_vendors
  before_save :set_products

  validates :codename, uniqueness: true
  validates :codename, length: { in: 3..250 }
  validates :cvss3, inclusion: { in: 0.0..10.0, allow_blank: true }
  validates :cvss2, inclusion: { in: 0.0..10.0, allow_blank: true }
  validates :feed, inclusion: { in: Vulnerability.feeds.keys}

  private

  def set_vendors
    return if blocked
    self.vendors = vendors_str.split(',')
                              .map(&:strip)
  end

  def set_products
    return if blocked
    self.products = products_str.split(',')
                                .map(&:strip)
  end

  def set_actuality
    self.actuality = Custom::Vulnerability.cast_actuality(self)
    if custom_actuality_not_set? || custom_actuality.nil?
      self.custom_actuality = actuality
    end
  end
end
