class Vulnerability < ApplicationRecord
  include Vulnerability::Ransackers
  include CustomFieldable
  include Monitorable

  has_paper_trail skip: [:processed, :processed_by_id]

  EXPLOIT_MATURITIES = {
    not_defined: 'not_defined',
    high: 'high',
    functional: 'functional',
    poc: 'poc',
    unproven: 'unproven'
  }.freeze

  ACTUALITIES = {
    not_set: 'not_set',
    actual: 'actual',
    not_actual: 'not_actual'
  }.freeze

  RELEVANCES = {
    not_set: 'not_set',
    relevant: 'relevant',
    not_relevant: 'not_relevant'
  }.freeze

  STATES = {
    modified: 'modified',
    published: 'published'
  }.freeze

  # source (feed) of vulnerability info
  enum feed: {custom: 'custom', nvd: 'nvd'}
  enum custom_actuality: ACTUALITIES, _prefix: true
  enum custom_relevance: RELEVANCES, _prefix: true
  enum actuality: ACTUALITIES, _prefix: true
  enum relevance: RELEVANCES, _prefix: true
  enum state: STATES, _prefix: true
  enum exploit_maturity: EXPLOIT_MATURITIES, _prefix: true
  enum custom_exploit_maturity: EXPLOIT_MATURITIES, _prefix: true

  scope :actual_and_relevant, -> {
    where(
      custom_actuality: 'actual',
      custom_relevance: 'relevant'
    )
  }

  attr_accessor :custom_vendors_str, :custom_products_str

  before_validation :set_actuality
  before_validation :set_relevance
  before_validation :set_state
  before_validation :set_custom_vendors
  before_validation :set_custom_products

  validates :codename, uniqueness: true
  validates :codename, length: { in: 3..250 }
  validates :vulnerability_kind_id, numericality: { only_integer: true, allow_blank: true }
  validates :cvss3, inclusion: { in: 0.0..10.0, allow_blank: true }
  validates :cvss2, inclusion: { in: 0.0..10.0, allow_blank: true }
  validates :feed, inclusion: { in: Vulnerability.feeds.values}
  validates :actuality, inclusion: { in: Vulnerability.actualities.values}
  validates :custom_actuality,
    inclusion: { in: Vulnerability.custom_actualities.values}
  validates :relevance, inclusion: { in: Vulnerability.relevances.values}
  validates :custom_relevance,
    inclusion: { in: Vulnerability.custom_relevances.values}
  validates :state,
    inclusion: { in: Vulnerability.states.values}
  validates :exploit_maturity,
    inclusion: { in: Vulnerability.exploit_maturities.values}
  validates :custom_exploit_maturity,
    inclusion: { in: Vulnerability.custom_exploit_maturities.values}
  validates :custom_vendors, array_elements_length: {min: 2, max: 200}
  validates :custom_products, array_elements_length: {min: 2, max: 200}

  belongs_to :processor, foreign_key: :processed_by_id, class_name: 'User', optional: true

  belongs_to :vulnerability_kind, optional: true

  # TODO: use or delete
  def exploit_maturity?
    maturity = custom_exploit_maturity || exploit_maturity
    return false if maturity == 'not_defined'
    return false if maturity == 'unproven'
    true
  end

  def custom_exploit_maturity?
    maturity = custom_exploit_maturity
    return false if maturity == 'not_defined'
    return false if maturity == 'unproven'
    true
  end

  private

  def set_custom_vendors
    return if custom_vendors_str.blank?
    self.custom_vendors = str_to_arr(custom_vendors_str)
  end

  def set_custom_products
    return if custom_products_str.blank?
    self.custom_products = str_to_arr(custom_products_str)
  end

  def str_to_arr(string)
    string.split(',')
          .map(&:strip)
  end

  def set_actuality
    self.actuality = Custom::VulnerabilityCustomization.cast_actuality(self)
    if custom_actuality_not_set? || custom_actuality.nil?
      self.custom_actuality = actuality
    end
  end

  def set_relevance
    if custom_relevance_not_set? || custom_relevance.nil?
      self.custom_relevance = relevance
    end
  end

  def set_state
    self.state = if published == modified
                   :published
                 else
                   :modified
                 end

  end
end
