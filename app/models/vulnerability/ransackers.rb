# frozen_string_literal: true

module Vulnerability::Ransackers
  extend ActiveSupport::Concern
  include RansackerDatetimeCast

  included do
    ransacker :published_str do
      RansackerDatetimeCast.datetime_field_to_text_search(
        'vulnerabilities',
        'published',
        :reverse
      )
    end

    ransacker :modified_str do
      RansackerDatetimeCast.datetime_field_to_text_search(
        'vulnerabilities',
        'modified',
        :reverse
      )
    end

    ransacker :vendors_str do
      Arel.sql("array_to_string(vulnerabilities.vendors, ' ')")
    end

    ransacker :products_str do
      Arel.sql("array_to_string(vulnerabilities.products, ' ')")
    end

    ransacker :description_str do
      Arel.sql("array_to_string(vulnerabilities.description, ' ')")
    end

    ransacker :state_str do
      field_transformation = <<~SQL
        CASE vulnerabilities.state
        WHEN 0
        THEN '#{I18n.t('activerecord.attributes.vulnerability.states.readed')}'
        WHEN 1
        THEN '#{I18n.t('activerecord.attributes.vulnerability.states.modified')}'
        ELSE '#{I18n.t('activerecord.attributes.vulnerability.states.published')}'
        END
      SQL
      Arel.sql(field_transformation)
    end

    ransacker :feed_str do
      field_transformation = <<~SQL
        CASE vulnerabilities.feed
        WHEN 0
        THEN '#{Vulnerability.human_enum_name(:feed, 'custom')}'
        WHEN 1
        THEN '#{Vulnerability.human_enum_name(:feed, 'nvd')}'
        END
      SQL
      Arel.sql(field_transformation)
    end

    ransacker :actuality_str do
      field_transformation = <<~SQL
        CASE vulnerabilities.custom_actuality
        WHEN 'actual'
        THEN '#{I18n.t('activerecord.attributes.vulnerability.actualities.actual')}'
        WHEN 'not_actual'
        THEN '#{I18n.t('activerecord.attributes.vulnerability.actualities.not_actual')}'
        ELSE '#{I18n.t('activerecord.attributes.vulnerability.actualities.not_set')}'
        END
      SQL
      Arel.sql(field_transformation)
    end

    ransacker :relevance_str do
      field_transformation = <<~SQL
        CASE vulnerabilities.custom_relevance
        WHEN 'relevant'
        THEN '#{I18n.t('activerecord.attributes.vulnerability.relevances.relevant')}'
        WHEN 'not_relevant'
        THEN '#{I18n.t('activerecord.attributes.vulnerability.relevances.not_relevant')}'
        ELSE '#{I18n.t('activerecord.attributes.vulnerability.relevances.not_set')}'
        END
      SQL
      Arel.sql(field_transformation)
    end

    ransacker :cvss do
      Arel.sql("COALESCE(vulnerabilities.cvss3, vulnerabilities.cvss2, 0)")
    end

    ransacker :cvss_vector do
      Arel.sql("COALESCE(vulnerabilities.cvss3_vector, vulnerabilities.cvss2_vector, '')")
    end
  end
end
