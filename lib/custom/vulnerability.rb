module Custom
  module Vulnerability
    module_function

#    def cast_custom_codename(*args)
#      true
#    end

    def cast_actuality(vuln)
      if vuln.cvss3_vector.present?
        cvss3_actual?(vuln.cvss3_vector) ? 'actual' : 'not_actual'
      elsif vuln.cvss2_vector.present?
        cvss2_actual?(vuln.cvss2_vector) ? 'actual' : 'not_actual'
      elsif vuln.custom_cvss3_vector.present?
        cvss3_actual?(vuln.custom_cvss3_vector) ? 'actual' : 'not_actual'
      else
        'not_set'
      end
    end

    def cvss3_actual?(vector)
      cvss3_one(vector) || cvss3_two(vector) || cvss3_three(vector)
    end

    def cvss2_actual?(vector)
      cvss2_one(vector) || cvss2_two(vector) || cvss2_three(vector)
    end

    # AV:N/PR:N/AC:H
    def cvss3_one(vector)
      return false unless vector.include?('AV:N')
      return false unless vector.include?('PR:N')
      return false unless vector.include?('AC:H')
      true
    end

    # AV:[NAL]/PR:N/AC:L
    def cvss3_two(vector)
      return false unless %r{AV:[NAL]}.match? vector
      return false unless vector.include?('PR:N')
      return false unless vector.include?('AC:L')
      true
    end

    # AV:N/PR:L/AC:L
    def cvss3_three(vector)
      return false unless vector.include?('AV:N')
      return false unless vector.include?('PR:L')
      return false unless vector.include?('AC:L')
      true
    end

    # AV:N/AU:N/AC:H
    def cvss2_one(vector)
      return false unless vector.include?('AV:N')
      return false unless vector.include?('AU:N')
      return false unless vector.include?('AC:H')
      true
    end

    # AV:[NAL]/AU:N/AC:L
    def cvss2_two(vector)
      return false unless %r{AV:[NAL]}.match? vector
      return false unless vector.include?('AU:N')
      return false unless vector.include?('AC:L')
      true
    end

    # AV:N/AU:S/AC:L
    def cvss2_three(vector)
      return false unless vector.include?('AV:N')
      return false unless vector.include?('AU:S')
      return false unless vector.include?('AC:L')
      true
    end
  end
end
